[{"/workspaces/Wordle/src/index.js":"1","/workspaces/Wordle/src/App.js":"2","/workspaces/Wordle/src/reportWebVitals.js":"3","/workspaces/Wordle/src/components/WordGenerator.js":"4","/workspaces/Wordle/src/components/Game.js":"5","/workspaces/Wordle/src/components/Timer.js":"6","/workspaces/Wordle/src/components/Hint.js":"7","/workspaces/Wordle/src/components/GameSettings.js":"8","/workspaces/Wordle/src/components/Board.js":"9"},{"size":535,"mtime":1681336670914,"results":"10","hashOfConfig":"11"},{"size":512,"mtime":1681336670914,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":1681336670914,"results":"13","hashOfConfig":"11"},{"size":1043,"mtime":1681336670914,"results":"14","hashOfConfig":"11"},{"size":7194,"mtime":1681336670914,"results":"15","hashOfConfig":"11"},{"size":617,"mtime":1681336670914,"results":"16","hashOfConfig":"11"},{"size":415,"mtime":1681336670914,"results":"17","hashOfConfig":"11"},{"size":1894,"mtime":1681336670914,"results":"18","hashOfConfig":"11"},{"size":826,"mtime":1681336670914,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ha8fe8",{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/workspaces/Wordle/src/index.js",[],[],"/workspaces/Wordle/src/App.js",[],[],"/workspaces/Wordle/src/reportWebVitals.js",[],[],"/workspaces/Wordle/src/components/WordGenerator.js",["49"],[],"import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nfunction WordGenerator() {\n  const [word, setWord] = useState('');\n\n  useEffect(() => {\n    async function fetchWord() {\n      let response = await axios.get(\n        'https://wordsapiv1.p.rapidapi.com/words/?random=true&letters=5',\n        {\n          headers: {\n            'x-rapidapi-host': 'wordsapiv1.p.rapidapi.com',\n            'x-rapidapi-key': '1e20cf9f5emsh9b90b84706bd09fp1351ebjsnae2ef578cca7',\n          },\n        }\n      );\n\n      while (response.data.word.length !== 5) {\n        response = await axios.get(\n          'https://wordsapiv1.p.rapidapi.com/words/?random=true&letters=5',\n          {\n            headers: {\n              'x-rapidapi-host': 'wordsapiv1.p.rapidapi.com',\n              'x-rapidapi-key': '1e20cf9f5emsh9b90b84706bd09fp1351ebjsnae2ef578cca7',\n            },\n          }\n        );\n      }\n\n      setWord(response.data.word.toLowerCase());\n    }\n\n    fetchWord();\n  }, []);\n\n  return word;\n}\n\nexport default WordGenerator;\n","/workspaces/Wordle/src/components/Game.js",["50","51","52","53","54"],[],"import React, { useState } from \"react\";\nimport axios from \"axios\";\nimport WordGenerator from \"./WordGenerator\";\nimport \"./Game.css\";\nimport Timer from \"./Timer\";\nimport Hint from \"./Hint\";\nimport GameSettings from \"./GameSettings\";\nimport Board from \"./Board\";\n\nfunction Game({ word, debug }) {\n  const [guess, setGuess] = useState(\"\");\n  const [guesses, setGuesses] = useState([]);\n  const [attempts, setAttempts] = useState(0);\n  const [maxAttempts, setMaxAttempts] = useState(6);\n  const [usedLetters, setUsedLetters] = useState(new Set());\n  const [stats, setStats] = useState({\n    wins: 0,\n    losses: 0,\n    guessesForWins: [],\n  });\n  const [isWinning, setIsWinning] = useState(false);\n  const [timerExpiry, setTimerExpiry] = useState(null);\n  const [timerExpired, setTimerExpired] = useState(false);\n  const [hint, setHint] = useState(null);\n  const [settings, setSettings] = useState({\n    backgroundColor: \"#ffffff\",\n    fontFamily: \"Arial, sans-serif\",\n  });\n\n  function handleGuess(guess) {\n    const guessArray = guess.toLowerCase().split(\"\");\n    const wordArray = word.split(\"\");\n\n    const result = guessArray.map((letter, i) => {\n      if (wordArray.includes(letter)) {\n        if (wordArray[i] === letter) {\n          return \"right letter, right place\";\n        } else {\n          return \"right letter, wrong place\";\n        }\n      } else {\n        return \"wrong letter\";\n      }\n    });\n\n    setGuesses([...guesses, { guess, result }]);\n    setGuess(\"\");\n    setAttempts(attempts + 1);\n\n    const newUsedLetters = new Set(usedLetters);\n    guessArray.forEach((letter) => newUsedLetters.add(letter));\n    setUsedLetters(newUsedLetters);\n\n    if (result.filter((r) => r.includes(\"right place\")).length === 5) {\n      setIsWinning(true);\n      alert(\n        `Congratulations! You guessed the word \"${word}\" in ${attempts} attempts.`\n      );\n      resetGame(true);\n    } else if (attempts + 1 >= maxAttempts) {\n      alert(`Sorry, you ran out of attempts. The word was \"${word}\".`);\n      resetGame(false);\n    }\n  }\n\n  function resetGame(won) {\n    if (won) {\n      setStats({\n        ...stats,\n        wins: stats.wins + 1,\n        guessesForWins: [...stats.guessesForWins, attempts],\n      });\n    } else {\n      setStats({ ...stats, losses: stats.losses + 1 });\n    }\n    setGuesses([]);\n    setAttempts(0);\n    setMaxAttempts(6);\n    setUsedLetters(new Set());\n    fetchWord();\n  }\n\n  function handleUpdateSettings(newSettings) {\n    setSettings(newSettings);\n  }\n\n  function isGuessValid(guess) {\n    return /^[a-zA-Z]+$/.test(guess) && guess.length === 5;\n  }\n\n  function handleInputChange(event) {\n    setGuess(event.target.value.toUpperCase());\n  }\n\n  function handleFormSubmit(event) {\n    event.preventDefault();\n\n    if (!isGuessValid(guess)) {\n      alert(\"Please enter a valid 5-letter word.\");\n      return;\n    }\n\n    if (\n      usedLetters.has(guess[0]) ||\n      usedLetters.has(guess[1]) ||\n      usedLetters.has(guess[2]) ||\n      usedLetters.has(guess[3]) ||\n      usedLetters.has(guess[4])\n    ) {\n      alert(\n        \"You have already used one or more of the letters in that word. Please try again.\"\n      );\n      return;\n    }\n\n    handleGuess(guess);\n  }\n\n  function fetchWord() {\n    axios\n      .get(\n        \"https://api.wordsapi.com/v1/words?random=true&partOfSpeech=noun&letters=5&api_key=<your_api_key>\"\n      )\n      .then((response) => {\n        if (response.data.length === 0) {\n          fetchWord();\n        } else {\n          const word = response.data[0].word.toUpperCase();\n          setGuess(\"\");\n          setGuesses([]);\n          setAttempts(0);\n          setMaxAttempts(6);\n          setUsedLetters(new Set());\n          WordGenerator.set(word);\n        }\n      });\n  }\n\n  const styles = {\n    fontFamily: \"Arial, sans-serif\",\n    margin: \"0 auto\",\n    maxWidth: 600,\n    padding: 20,\n  };\n\n  const headingStyles = {\n    textAlign: \"center\",\n    marginBottom: 20,\n    fontSize: 28,\n  };\n\n  const labelStyles = {\n    fontSize: 18,\n  };\n\n  const inputStyles = {\n    padding: 10,\n    fontSize: 18,\n  };\n\n  const buttonStyles = {\n    padding: \"10px 20px\",\n    fontSize: 18,\n    backgroundColor: \"#4CAF50\",\n    color: \"white\",\n    border: \"none\",\n    borderRadius: 4,\n    cursor: \"pointer\",\n  };\n\n  const infoStyles = {\n    fontSize: 18,\n    marginBottom: 10,\n  };\n\n  const resultStyles = {\n    fontSize: 16,\n  };\n\n  return (\n    <div style={styles}>\n      <h1 style={headingStyles}>Guess the 5-letter word</h1>\n      <p style={infoStyles}>\n        Word:{\" \"}\n        {word &&\n          word\n            .split(\"\")\n            .map(() => \"_ \")\n            .join(\"\")}\n      </p>\n      <form onSubmit={handleFormSubmit}>\n        <label htmlFor=\"guessInput\" style={labelStyles}>\n          Enter your guess:\n        </label>\n        <br />\n        <input\n          type=\"text\"\n          id=\"guessInput\"\n          value={guess}\n          onChange={handleInputChange}\n          style={inputStyles}\n        />\n        <br />\n        <button type=\"submit\" style={buttonStyles}>\n          Guess\n        </button>\n      </form>\n      <p style={infoStyles}>Attempts: {attempts}</p>\n      <p style={infoStyles}>Max attempts: {maxAttempts}</p>\n      <p style={infoStyles}>\n        Used letters: {Array.from(usedLetters).join(\", \")}\n      </p>\n      {debug && <p>Answer: {word}</p>}\n      <h2 style={headingStyles}>Guess history:</h2>\n      {guesses.map((guess, i) => (\n        <div key={i} style={{ marginBottom: 20 }}>\n          <p style={infoStyles}>{guess.guess}</p>\n          <ul>\n            {guess.result.map((result, i) => (\n              <li key={i} style={resultStyles}>\n                {result}\n              </li>\n            ))}\n          </ul>\n        </div>\n      ))}\n      {guesses.filter((r) => Array.isArray(r) && r.includes(\"right place\"))\n        .length === 5 && (\n        <div style={{ marginBottom: 20 }}>\n          <p\n            className={isWinning ? \"winning-message\" : \"\"}\n            style={headingStyles}\n          >\n            <p className={isWinning ? \"winning-message\" : \"\"}>\n              Congratulations! You guessed the word \"{word}\" in {attempts}{\" \"}\n              attempts.\n            </p>\n            <button onClick={resetGame}>Play again</button>\n          </p>\n        </div>\n      )}\n\n      {attempts + 1 >= maxAttempts && (\n        <div>\n          <p>Sorry, you ran out of attempts. The word was \"{word}\".</p>\n          <button onClick={resetGame}>Play again</button>\n        </div>\n      )}\n      <div>\n        <Timer\n          expiryTimestamp={Date.now() + 120000}\n          onExpire={() => setTimerExpired(true)}\n        />\n        <Hint word={word} />\n        <GameSettings\n          settings={settings}\n          onUpdateSettings={handleUpdateSettings}\n        />\n        <Board guesses={guesses} />\n        <p>Wins: {stats.wins}</p>\n        <p>Losses: {stats.losses}</p>\n        <p>\n          Avg guesses for wins:{\" \"}\n          {stats.guessesForWins.length\n            ? (\n                stats.guessesForWins.reduce((a, b) => a + b, 0) /\n                stats.guessesForWins.length\n              ).toFixed(2)\n            : 0}\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default Game;\n","/workspaces/Wordle/src/components/Timer.js",[],[],"/workspaces/Wordle/src/components/Hint.js",[],[],"/workspaces/Wordle/src/components/GameSettings.js",[],[],"/workspaces/Wordle/src/components/Board.js",[],[],{"ruleId":"55","severity":1,"message":"56","line":1,"column":8,"nodeType":"57","messageId":"58","endLine":1,"endColumn":13},{"ruleId":"55","severity":1,"message":"59","line":22,"column":10,"nodeType":"57","messageId":"58","endLine":22,"endColumn":21},{"ruleId":"55","severity":1,"message":"60","line":22,"column":23,"nodeType":"57","messageId":"58","endLine":22,"endColumn":37},{"ruleId":"55","severity":1,"message":"61","line":23,"column":10,"nodeType":"57","messageId":"58","endLine":23,"endColumn":22},{"ruleId":"55","severity":1,"message":"62","line":24,"column":10,"nodeType":"57","messageId":"58","endLine":24,"endColumn":14},{"ruleId":"55","severity":1,"message":"63","line":24,"column":16,"nodeType":"57","messageId":"58","endLine":24,"endColumn":23},"no-unused-vars","'React' is defined but never used.","Identifier","unusedVar","'timerExpiry' is assigned a value but never used.","'setTimerExpiry' is assigned a value but never used.","'timerExpired' is assigned a value but never used.","'hint' is assigned a value but never used.","'setHint' is assigned a value but never used."]